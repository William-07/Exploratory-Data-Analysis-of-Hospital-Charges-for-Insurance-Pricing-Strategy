#data structure of the each feature
str(data)
#see the describe statistic of the data
summary(data)
# Count number of missing values in each column
Num_of_Null<- sapply(data, function(x) sum(is.na(x)))
print(Num_of_Null)
#numeric data
#correlation matrix
#load library
library(ggplot2)
library(corrplot)
#select numeric feeatures
numeric_data <- data[sapply(data, is.numeric)]
#plot correlation matrix
cor_matrix <- cor(numeric_data)
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 1,
addCoef.col = "darkgray")
#histogram(frequnecy)
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot its histogram
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Adjust binwidth as necessary
xlab(feature) +
ylab("Count") +
ggtitle(paste("Histogram of", feature))
print(p)
}
#scatter plot
#select numeric features and except charges
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot it against 'charges'
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature, y = "charges")) +
geom_point() +
xlab(feature) +
ylab("Charges") +
ggtitle(paste("Scatter Plot of", feature, "vs Charges"))
print(p)
}
#Nominal Data
#select nominal data
nominal_feature <- data[sapply(data, is.character)]
#print(nominal_data)
# Assuming 'nominal_data' contains your nominal (categorical) columns
nominal_columns <- names(nominal_features)
data <- read.csv("/Users/shenglienlee/Desktop/Work/2024_spring/Intro to BA/HW1/Data/Raw/insurance.csv")
#print(data)
#data structure of the each feature
str(data)
#see the describe statistic of the data
summary(data)
# Count number of missing values in each column
Num_of_Null<- sapply(data, function(x) sum(is.na(x)))
print(Num_of_Null)
#numeric data
#correlation matrix
#load library
library(ggplot2)
library(corrplot)
#select numeric feeatures
numeric_data <- data[sapply(data, is.numeric)]
#plot correlation matrix
cor_matrix <- cor(numeric_data)
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 1,
addCoef.col = "darkgray")
#histogram(frequnecy)
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot its histogram
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Adjust binwidth as necessary
xlab(feature) +
ylab("Count") +
ggtitle(paste("Histogram of", feature))
print(p)
}
#scatter plot
#select numeric features and except charges
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot it against 'charges'
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature, y = "charges")) +
geom_point() +
xlab(feature) +
ylab("Charges") +
ggtitle(paste("Scatter Plot of", feature, "vs Charges"))
print(p)
}
#Nominal Data
#select nominal data
nominal_features <- data[sapply(data, is.character)]
#print(nominal_data)
# Assuming 'nominal_data' contains your nominal (categorical) columns
nominal_columns <- names(nominal_features)
# Loop through each nominal column to create a pie chart with percentages
for (column in nominal_columns) {
# Calculate the count of each category
data_for_plot <- as.data.frame(table(nominal_features[[column]]))
# Calculate percentages
data_for_plot$Percentage <- round(data_for_plot$Freq / sum(data_for_plot$Freq) * 100, 1)
# Create the pie chart
p <- ggplot(data_for_plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
geom_text(aes(label = paste0(Percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = paste("Pie Chart of", column), x = NULL, y = NULL, fill = column) +
theme_void()
print(p)
}
#boxplot
nominal_features <- names(data[sapply(data, function(x) is.character(x))])
# Loop through each nominal column to create a box plot for 'charges' by each category
for (column in nominal_features) {
p <- ggplot(data, aes_string(x = column, y = "charges")) +
geom_boxplot() +
labs(x = column, y = "Charges", title = paste("Box Plot of Charges by", column)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability
print(p)
}
print(nominal_features)
#bar chart of Average
nominal_features <- names(data[sapply(data, is.factor)])
# Calculate average charges for each category of each nominal feature and plot
for (feature in nominal_features) {
# Calculate averages
averages <- aggregate(charges ~ get(feature), data, mean)
# Plot bar chart
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(x = feature, y = "Average Charges", title = paste("Average Charges by", feature)) +
theme_minimal()
print(p)
}
#bar chart of Average
nominal_features <- names(data[sapply(data, is.factor)])
# Calculate average charges for each category of each nominal feature and plot
for (feature in nominal_features) {
# Calculate averages
averages <- aggregate(charges ~ get(feature), data, mean)
# Plot bar chart
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(x = feature, y = "Average Charges", title = paste("Average Charges by", feature)) +
theme_minimal()
print(p)
}
#bar chart of Average
nominal_features <- names(data[sapply(data, is.factor)])
# Calculate average charges for each category of each nominal feature and plot
for (feature in nominal_features) {
# Calculate averages
averages <- aggregate(charges ~ get(feature), data, mean)
# Plot bar chart
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(x = feature, y = "Average Charges", title = paste("Average Charges by", feature)) +
theme_minimal()
print(p)
}
nominal_features <- names(data[sapply(data, is.factor)])
# Calculate average charges for each category of each nominal feature and plot
for (feature in nominal_features) {
# Calculate averages
averages <- aggregate(charges ~ get(feature), data, mean)
# Plot bar chart
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(x = feature, y = "Average Charges", title = paste("Average Charges by", feature)) +
theme_minimal()
print(p)
}
nominal_features <- names(data[sapply(data, is.factor)])
# Calculate average charges for each category of each nominal feature and plot
for (feature in nominal_features) {
# Calculate averages
averages <- aggregate(charges ~ get(feature), data, mean)
# Plot bar chart
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(x = feature, y = "Average Charges", title = paste("Average Charges by", feature)) +
theme_minimal()
print(1)
}
data <- read.csv("/Users/shenglienlee/Desktop/Work/2024_spring/Intro to BA/HW1/Data/Raw/insurance.csv")
#print(data)
#data structure of the each feature
str(data)
#see the describe statistic of the data
summary(data)
# Count number of missing values in each column
Num_of_Null<- sapply(data, function(x) sum(is.na(x)))
print(Num_of_Null)
#numeric data
#correlation matrix
#load library
library(ggplot2)
library(corrplot)
#select numeric feeatures
numeric_data <- data[sapply(data, is.numeric)]
#plot correlation matrix
cor_matrix <- cor(numeric_data)
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 1,
addCoef.col = "darkgray")
#histogram(frequnecy)
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot its histogram
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Adjust binwidth as necessary
xlab(feature) +
ylab("Count") +
ggtitle(paste("Histogram of", feature))
print(p)
}
#scatter plot
#select numeric features and except charges
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot it against 'charges'
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature, y = "charges")) +
geom_point() +
xlab(feature) +
ylab("Charges") +
ggtitle(paste("Scatter Plot of", feature, "vs Charges"))
print(p)
}
#Nominal Data
#select nominal data
nominal_features <- data[sapply(data, is.character)]
#print(nominal_data)
# Assuming 'nominal_data' contains your nominal (categorical) columns
nominal_columns <- names(nominal_features)
# Loop through each nominal column to create a pie chart with percentages
for (column in nominal_columns) {
# Calculate the count of each category
data_for_plot <- as.data.frame(table(nominal_features[[column]]))
# Calculate percentages
data_for_plot$Percentage <- round(data_for_plot$Freq / sum(data_for_plot$Freq) * 100, 1)
# Create the pie chart
p <- ggplot(data_for_plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
geom_text(aes(label = paste0(Percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = paste("Pie Chart of", column), x = NULL, y = NULL, fill = column) +
theme_void()
print(p)
}
#boxplot
nominal_features <- names(data[sapply(data, function(x) is.character(x))])
# Loop through each nominal column to create a box plot for 'charges' by each category
for (column in nominal_features) {
p <- ggplot(data, aes_string(x = column, y = "charges")) +
geom_boxplot() +
labs(x = column, y = "Charges", title = paste("Box Plot of Charges by", column)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability
print(p)
}
nominal_features <- names(data[sapply(data, is.factor)])
# Calculate average charges for each category of each nominal feature and plot
for (feature in nominal_features) {
# Calculate averages
averages <- aggregate(charges ~ get(feature), data, mean)
# Plot bar chart
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(x = feature, y = "Average Charges", title = paste("Average Charges by", feature)) +
theme_minimal()
print(p)
}
nominal_features <- names(data[sapply(data, is.character)])
# Calculate average charges for each category of each nominal feature and plot
for (feature in nominal_features) {
# Calculate averages
averages <- aggregate(charges ~ get(feature), data, mean)
# Plot bar chart
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(x = feature, y = "Average Charges", title = paste("Average Charges by", feature)) +
theme_minimal()
print(p)
}
nominal_features <- names(data[sapply(data, is.character)])
# Plot a bar chart for the average charges of each category in each nominal feature
for (feature in nominal_features) {
averages <- aggregate(charges ~ get(feature), data = data, FUN = mean)
ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(title = paste("Average Charges by", feature), x = feature, y = "Average Charges") +
theme_minimal()
}
nominal_features <- names(data[sapply(data, is.character)])
# Plot a bar chart for the average charges of each category in each nominal feature
for (feature in nominal_features) {
averages <- aggregate(charges ~ get(feature), data = data, FUN = mean)
p <- ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(title = paste("Average Charges by", feature), x = feature, y = "Average Charges") +
theme_minimal()
print(p)
}
nominal_features <- names(data[sapply(data, is.character)])
# Plot a bar chart for the average charges of each category in each nominal feature
for (feature in nominal_features) {
averages <- aggregate(charges ~ get(feature), data = data, FUN = mean)
ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(title = paste("Average Charges by", feature), x = feature, y = "Average Charges") +
theme_minimal()
}
#import library
library(dplyr)
for (feature in nominal_features) {
# Calculate the average charges for each category of the nominal feature
average_charges <- data %>%
group_by(!!sym(feature)) %>%
summarise(AverageCharges = mean(charges, na.rm = TRUE))  # na.rm = TRUE to remove NA values
# Plot the average charges using a bar chart
p <- ggplot(average_charges, aes_string(x = feature, y = "AverageCharges")) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = paste("Average Charges by", feature), x = feature, y = "Average Charges") +
theme_minimal()
print(p)
}
data <- read.csv("/Users/shenglienlee/Desktop/Work/2024_spring/Intro to BA/HW1/Data/Raw/insurance.csv")
#print(data)
#data structure of the each feature
str(data)
#see the describe statistic of the data
summary(data)
# Count number of missing values in each column
Num_of_Null<- sapply(data, function(x) sum(is.na(x)))
print(Num_of_Null)
#numeric data
#correlation matrix
#load library
library(ggplot2)
library(corrplot)
#select numeric feeatures
numeric_data <- data[sapply(data, is.numeric)]
#plot correlation matrix
cor_matrix <- cor(numeric_data)
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 1,
addCoef.col = "darkgray")
#histogram(frequnecy)
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot its histogram
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Adjust binwidth as necessary
xlab(feature) +
ylab("Count") +
ggtitle(paste("Histogram of", feature))
print(p)
}
#scatter plot
#select numeric features and except charges
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot it against 'charges'
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature, y = "charges")) +
geom_point() +
xlab(feature) +
ylab("Charges") +
ggtitle(paste("Scatter Plot of", feature, "vs Charges"))
print(p)
}
#Nominal Data
#select nominal data
nominal_features <- data[sapply(data, is.character)]
#print(nominal_data)
# Assuming 'nominal_data' contains your nominal (categorical) columns
nominal_columns <- names(nominal_features)
# Loop through each nominal column to create a pie chart with percentages
for (column in nominal_columns) {
# Calculate the count of each category
data_for_plot <- as.data.frame(table(nominal_features[[column]]))
# Calculate percentages
data_for_plot$Percentage <- round(data_for_plot$Freq / sum(data_for_plot$Freq) * 100, 1)
# Create the pie chart
p <- ggplot(data_for_plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
geom_text(aes(label = paste0(Percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = paste("Pie Chart of", column), x = NULL, y = NULL, fill = column) +
theme_void()
print(p)
}
#boxplot
nominal_features <- names(data[sapply(data, function(x) is.character(x))])
# Loop through each nominal column to create a box plot for 'charges' by each category
for (column in nominal_features) {
p <- ggplot(data, aes_string(x = column, y = "charges")) +
geom_boxplot() +
labs(x = column, y = "Charges", title = paste("Box Plot of Charges by", column)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability
print(p)
}
nominal_features <- names(data[sapply(data, is.character)])
# Plot a bar chart for the average charges of each category in each nominal feature
for (feature in nominal_features) {
averages <- aggregate(charges ~ get(feature), data = data, FUN = mean)
ggplot(averages, aes_string(x = feature, y = "charges")) +
geom_bar(stat = "identity") +
labs(title = paste("Average Charges by", feature), x = feature, y = "Average Charges") +
theme_minimal()
}
#import library
library(dplyr)
# Assuming your dataframe is named 'data'
# And you have previously defined 'nominal_features' which includes the names of all nominal columns
for (feature in nominal_features) {
# Calculate the average charges for each category of the nominal feature
average_charges <- data %>%
group_by(!!sym(feature)) %>%
summarise(AverageCharges = mean(charges, na.rm = TRUE))  # na.rm = TRUE to remove NA values
# Plot the average charges using a bar chart
p <- ggplot(average_charges, aes_string(x = feature, y = "AverageCharges")) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = paste("Average Charges by", feature), x = feature, y = "Average Charges") +
theme_minimal()
print(p)
}
data <- read.csv("/Users/shenglienlee/Desktop/Work/2024_spring/Intro to BA/HW1/Data/Raw/insurance.csv")
#print(data)
#data structure of the each feature
str(data)
#see the describe statistic of the data
summary(data)
# Count number of missing values in each column
Num_of_Null<- sapply(data, function(x) sum(is.na(x)))
print(Num_of_Null)
#numeric data
#correlation matrix
#load library
library(ggplot2)
library(corrplot)
#select numeric features
numeric_data <- data[sapply(data, is.numeric)]
#plot correlation matrix
cor_matrix <- cor(numeric_data)
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 1,
addCoef.col = "darkgray")
#histogram(frequency)
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot its histogram
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Adjust binwidth as necessary
xlab(feature) +
ylab("Count") +
ggtitle(paste("Histogram of", feature))
print(p)
}
#scatter plot
#select numeric features and except charges
numeric_features <- names(data)[sapply(data, is.numeric) & names(data) != "charges"]
# Loop through each numeric feature to plot it against 'charges'
for (feature in numeric_features) {
p <- ggplot(data, aes_string(x = feature, y = "charges")) +
geom_point() +
xlab(feature) +
ylab("Charges") +
ggtitle(paste("Scatter Plot of", feature, "vs Charges"))
print(p)
}
#Nominal Data
#select nominal data
nominal_features <- data[sapply(data, is.character)]
#print(nominal_data)
#select nominal data
nominal_columns <- names(nominal_features)
# Loop through each nominal column to create a pie chart with percentages
for (column in nominal_columns) {
# Calculate the count of each category
data_for_plot <- as.data.frame(table(nominal_features[[column]]))
# Calculate percentages
data_for_plot$Percentage <- round(data_for_plot$Freq / sum(data_for_plot$Freq) * 100, 1)
# Create the pie chart
p <- ggplot(data_for_plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
geom_text(aes(label = paste0(Percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = paste("Pie Chart of", column), x = NULL, y = NULL, fill = column) +
theme_void()
print(p)
}
#box plot
nominal_features <- names(data[sapply(data, function(x) is.character(x))])
# Loop through each nominal column to create a box plot for 'charges' by each category
for (column in nominal_features) {
p <- ggplot(data, aes_string(x = column, y = "charges")) +
geom_boxplot() +
labs(x = column, y = "Charges", title = paste("Box Plot of Charges by", column)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability
print(p)
}
